var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from 'axios';
import { ListApiResponse } from './api-response.js';
/**
 * hacoCMS の API クライアント
 */
export class HacoCmsClient {
    /**
     * @param baseURL API のベース URL `https://{アカウント識別子}-{サブドメイン}.hacocms.com/`
     * @param accessToken プロジェクトの Access-Token
     * @param projectDraftToken _(optional)_ プロジェクトの Project-Draft-Token
     */
    constructor(baseURL, accessToken, projectDraftToken) {
        const headers = {
            Authorization: `Bearer ${accessToken}`,
        };
        baseURL = new URL('/api/v1/', baseURL).toString();
        this.axios = axios.create({
            baseURL,
            headers,
        });
        if (projectDraftToken) {
            this.axiosDraft = axios.create({
                baseURL,
                headers: Object.assign(Object.assign({}, headers), { 'Haco-Project-Draft-Token': projectDraftToken }),
            });
        }
    }
    /**
     * コンテンツの一覧を取得します。
     * {@link https://hacocms.com/references/content-api#tag/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84/paths/~1api~1v1~1%7Bendpoint%7D/get}
     *
     * @param Constructor コンテンツの JSON オブジェクトを引数とするコンストラクタを持つクラスオブジェクト
     * @param endpoint リスト形式 API のエンドポイント
     * @param query クエリパラメータ
     * @returns API のレスポンスボディ
     */
    getList(Constructor, endpoint, query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.axios.get(endpoint, {
                params: query,
            });
            return new ListApiResponse(res.data, Constructor);
        });
    }
    /**
     * コンテンツの一覧を下書きを含めて取得します。
     * {@link https://hacocms.com/references/content-api#tag/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84/paths/~1api~1v1~1%7Bendpoint%7D/get}
     *
     * @param Constructor コンテンツの JSON オブジェクトを引数とするコンストラクタを持つクラスオブジェクト
     * @param endpoint リスト形式 API のエンドポイント
     * @param query クエリパラメータ
     * @returns API のレスポンスボディ
     */
    getListIncludingDraft(Constructor, endpoint, query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.axiosDraft) {
                throw new Error(`need Project-Draft-Token to get draft contents`);
            }
            const res = yield this.axiosDraft.get(endpoint, {
                params: query,
            });
            return new ListApiResponse(res.data, Constructor);
        });
    }
    /**
     * シングル形式 API のコンテンツを取得します。
     * {@link https://hacocms.com/references/content-api#tag/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84/paths/~1api~1v1~1%7Bendpoint%7D/get}
     *
     * @param Constructor コンテンツの JSON オブジェクトを引数とするコンストラクタを持つクラスオブジェクト
     * @param endpoint シングル形式 API のエンドポイント
     * @returns コンテンツのオブジェクト（`Constructor` 型）
     */
    getSingle(Constructor, endpoint) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const axios = (_a = this.axiosDraft) !== null && _a !== void 0 ? _a : this.axios;
            const res = yield axios.get(endpoint);
            return new Constructor(res.data);
        });
    }
    /**
     * 指定したコンテンツを取得します。
     * {@link https://hacocms.com/references/content-api#tag/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84/paths/~1api~1v1~1%7Bendpoint%7D~1%7Bcontent_id%7D/get}
     *
     * @param Constructor コンテンツの JSON オブジェクトを引数とするコンストラクタを持つクラスオブジェクト
     * @param endpoint API のエンドポイント
     * @param id コンテンツ ID
     * @param draftToken _(optional)_ 未公開コンテンツを取得するためのトークン
     * @returns コンテンツのオブジェクト（`Constructor` 型）
     */
    getContent(Constructor, endpoint, id, draftToken) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const axios = (_a = this.axiosDraft) !== null && _a !== void 0 ? _a : this.axios;
            const params = draftToken ? { draft: draftToken } : {};
            const res = yield axios.get(`${endpoint}/${id}`, { params });
            return new Constructor(res.data);
        });
    }
}
