var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SortQuery_orders;
/**
 * ソートクエリ
 */
export class SortQuery {
    constructor(orders) {
        _SortQuery_orders.set(this, void 0);
        __classPrivateFieldSet(this, _SortQuery_orders, orders, "f");
    }
    /**
     * ソートクエリ文字列を組み立てます。
     *
     * @param orders コンテンツの比較に使用するフィールド。比較する順に、昇順の場合はフィールド名、降順の場合は `[フィールド名, 'desc']` または `'-フィールド名'` を並べます。
     * @returns ソートクエリ文字列
     */
    static build(...orders) {
        return new SortQuery(orders).toString();
    }
    toString() {
        return __classPrivateFieldGet(this, _SortQuery_orders, "f").map((order) => (order instanceof Array ? `-${order[0]}` : order)).join(',');
    }
}
_SortQuery_orders = new WeakMap();
